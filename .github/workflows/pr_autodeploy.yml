name: Auto Deploy Databricks Pipeline

on:
  push:
    paths:
      - 'ahd-data-pipelines/conf.j2/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check Shell
        run: |
          echo "Current shell: $SHELL"
      
      - name: Install Databricks CLI
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          (echo; echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"') >> /home/runner/.bashrc
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew tap databricks/tap
          brew install databricks
          echo fpath+=$(brew --prefix)/share/zsh/site-functions >> ~/.zshrc
          echo 'autoload -Uz compinit && compinit' >> ~/.zshrc
          databricks -v
          export PATH="$PATH:/home/linuxbrew/.linuxbrew/Cellar/databricks/0.218.1/bin"
          echo $PATH

      - name: Set up Databricks CLI
        run: |
          /home/linuxbrew/.linuxbrew/Cellar/databricks/0.218.1/bin/databricks -v
          databricks -v

      - name: Check Databricks Access
        run: |
          databricks workspace ls

      - name: Get list of changed files (handle no changes)
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD -- 'ahd-data-pipelines/conf.j2/')
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No changed files found."
          else
            echo "Changed files:"
            echo "$CHANGED_FILES" | grep 'ahd-data-pipelines/conf\.j2/'
          fi

      - name: Determine changes and deploy pipelines
        run: |
          if echo "$CHANGED_FILES" | grep -q 'ahd-data-pipelines/conf\.j2/parameters/census/language/'; then
            echo "Updating Language Pipeline"
          fi

      - name: Extract census_language section
        run: |
          start_line=$(grep -n 'census_language:' conf.j2/data.dev.yml | cut -d ':' -f 1)
          start_line=$((start_line + 1))
          end_line=$(grep -n -m1 'template:' conf.j2/data.dev.yml | cut -d ':' -f 1)
          if [ -z "$end_line" ]; then
            end_line=$(wc -l < conf.j2/data.dev.yml)
          fi
          sed -n "${start_line},${end_line}p" conf.j2/data.dev.yml > census_language_section.yml

      - name: Create new file with census_language section
        run: |
          head -n 3 conf.j2/data.dev.yml > conf.j2/data.dev2.yml
          cat census_language_section.yml >> conf.j2/data.dev2.yml

      - name: Output contents of the new file
        run: cat conf.j2/data.dev2.yml

# switch out conf.j2/data.dev.yml for conf.j2/data.dev2.yml and run deploy steps

      - name: Deploy Dev Pipeline with conf.j2/data.dev2.yml file
        run: |
          mv conf.j2/data.dev.yml conf.j2/temp.yml
          mv conf.j2/data.dev2.yml conf.j2/data.dev.yml
          mv conf.j2/temp.yml conf.j2/data.dev2.yml
          rm -rf conf
          rm -f databricks.yml
          python bin/process_templates.py --env dev
          cp -rf conf.j2/workflows conf/workflows
          databricks bundle validate -t dev --profile dev
          cp .gitignore .gitignore.orig
          cp .deployment_gitignore .gitignore
          databricks bundle deploy -t dev --profile dev
          mv .gitignore.orig .gitignore
