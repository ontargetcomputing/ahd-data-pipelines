name: Auto Deploy Databricks Pipeline

on:
  push:
    paths:
      - 'ahd-data-pipelines/conf.j2/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: |
          pip install poetry
      
      - name: install-databricks-cli
        uses: microsoft/install-databricks-cli@v1.0.0

      - name: Output databricks version 
        run: databricks -v

      - name: Create Databricks Config File
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_URL_DEV }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN_DEV }}
        run: |
          echo "[ci]" > /home/runner/.databrickscfg
          echo "host = $DATABRICKS_HOST" >> /home/runner/.databrickscfg
          echo "token = $DATABRICKS_TOKEN" >> /home/runner/.databrickscfg

      - name: Get list of changed files (handle no changes)
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD -- 'ahd-data-pipelines/conf.j2/')
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No changed files found."
          else
            echo "Changed files:"
            echo "$CHANGED_FILES" | grep 'ahd-data-pipelines/conf\.j2/'
          fi

      - name: Determine changes and deploy pipelines
        run: |
          if echo "$CHANGED_FILES" | grep -q 'ahd-data-pipelines/conf\.j2/parameters/census/language/'; then
            echo "Updating Language Pipeline"
          fi

      - name: Extract census_language section
        run: |
          start_line=$(grep -n 'census_language:' conf.j2/data.ci.yml | cut -d ':' -f 1)
          template_line=$(awk "NR==$start_line+2,/template:/" conf.j2/data.ci.yml | grep -n 'template:' | cut -d ':' -f 1)
          if [ -z "$template_line" ]; then
            end_line=$(wc -l < conf.j2/data.ci.yml)
          else
            end_line=$((start_line + template_line - 2)) # -2 to get the line before 'template:'
          fi
          sed -n "${start_line},${end_line}p" conf.j2/data.ci.yml > census_language_section.yml

      - name: Create new file with census_language section
        run: |
          head -n 3 conf.j2/data.ci.yml > conf.j2/data.ci2.yml
          cat census_language_section.yml >> conf.j2/data.ci2.yml

      - name: Output contents of the new file
        run: cat conf.j2/data.ci2.yml

      - name: List stored variables(debug)
        run: |
          env

      - name: Extract template filename and get workflow name
        run: |
          template_file=$(awk -F 'template: ' 'NF>1{print $2}' conf.j2/data.ci2.yml)
          template_file="${template_file/conf/conf.j2}"
          
          workflow_name=$(grep 'name:' "$template_file" | cut -d ':' -f 2-)
          workflow_name=$(echo "$workflow_name" | awk '{$1=$1;print}')
          echo "WORKFLOW_NAME=$workflow_name" >> $GITHUB_ENV

      - name: Use extracted workflow name
        run: |
          echo "Workflow Name: $WORKFLOW_NAME"

# start workflow with ID
# check task status


